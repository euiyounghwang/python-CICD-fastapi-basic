name: Build and Test

# on:
#   workflow_call:
#   push:
#     branches-ignore:  [dev, master]

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
    
jobs:

  code-quality:
    name: Install Dependency with Poetry
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry

      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: poetry

      - name: Install Python dependencies
        run: poetry install


  test:
    name: Run tests
    needs: code-quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry

      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: poetry

      - name: Install dependencies
        run: poetry install
        
      - name: Build Image for ES7
        uses: docker/build-push-action@v4
        with:
          target: omni_es
          tags: bees-omnisearch-es7:omni_es
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          # build-args: AWS_ECR_ACCOUNT_URL=${{ vars.FN_ECR_REGISTRY_URL }}
          # push: false
          # load: true

      - name: Run ES7
        run: |
          docker run --name bees-omnisearch-es7 -d --publish 9201:9201 --expose 9201 -e node.name=fn-dm-bees-omni-data-01 -e discovery.type=single-node -e http.port=9201 -e http.cors.enabled=true -e http.cors.allow-origin=* -e http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization -e http.cors.allow-credentials=true -e xpack.security.enabled=false -e bootstrap.system_call_filter=false -e ES_JAVA_OPTS="-Xms1g -Xmx1g" bees-omnisearch-es7:omni_es


      - name: Run tests
        run: poetry run pytest -sv ./tests

      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: htmlcov

  docker:
    name: Build and Push to DockerHub
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          # images: euiyoung/fastapi-docker-github-actions:es
          images: $IMAGE_NAME:es

  #     - name: Login to Docker Hub
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: src
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}

  alert:
    name: Alerts
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # - name: Post to a Slack channel
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }} 
      #     author_name: Sloth Backend - dev 
      #     fields: repo,commit,message,author
      #     mention: here
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: general
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: 'Post Content :rocket:'
          SLACK_TITLE: Post Title
          SLACK_USERNAME: rtCamp
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
