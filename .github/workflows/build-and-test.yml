
name: Build and Test

# on:
#   workflow_call:
#   push:
#     branches-ignore:  [dev, master]

on:
  push:
    # branches:
    #   - dev
    #   - feature/*
    branches: [dev, master, feature/*, release/*]
  pull_request:
    branches: ['*']
    
jobs:

  build-tests:
    # services:
    #   elasticsearch_service:
    #     image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    #     env:
    #       discovery.type: single-node
    #     ports:
    #         # <port on host>:<port on container>
    #       - 9209:9200
    #     options: >-
    #       --health-cmd "curl http://localhost:9209/_cluster/health"
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 10
          
    name: Build and tests
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     elasticsearch: ["8.8.0"]
    steps:
      - uses: actions/checkout@v3

      - name: Install poetry
        id: Build-Poetry
        run: pipx install poetry

      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: poetry

      - name: Install Python dependencies
        run: poetry install
        
      - name: Configure sysctl limits
        run: |
          sudo swapoff -a
          sudo sysctl -w vm.swappiness=1
          sudo sysctl -w fs.file-max=262144
          sudo sysctl -w vm.max_map_count=262144
    
     
      # - name: Start Elasticsearch
      #   uses: ./.gha/Docker/Elasticsearch
      #   # with:
      #   #   stack-version: ${{ matrix.elasticsearch }}
            
      # - name: Elasticsearch is reachable
      #   run: |
      #     curl --verbose --show-error http://localhost:9209
      
                      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker-container            
            
      - name: Build Image for ES7
        id: Build-elasticsearch
        uses: docker/build-push-action@v4
        with:
          context: .
          target: omni_es
          tags: bees-omnisearch-es7:omni_es
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # build-args: AWS_ECR_ACCOUNT_URL=${{ vars.FN_ECR_REGISTRY_URL }}
          push: false
          load: true
                
      - name: Run ES7
        uses: docker/build-push-action@v4
        with:
          run: |
            docker run --name bees-omnisearch-es7 -d --network bridge --publish 9209:9201 --expose 9201 -e node.name=fn-dm-bees-omni-data-01 -e discovery.type=single-node -e http.port=9201 -e http.cors.enabled=true -e http.cors.allow-origin=* -e http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization -e http.cors.allow-credentials=true -e xpack.security.enabled=false -e bootstrap.system_call_filter=false -e ES_JAVA_OPTS="-Xms1g -Xmx1g" bees-omnisearch-es7:omni_es
            docker restart bees-omnisearch-es7
            sleep 10

      - name: Elasticsearch is reachable
        run: |
          curl --verbose --show-error http://localhost:9201
            
      - name: Run tests
        id: Build-tests
        run: poetry run pytest -sv ./tests

      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: htmlcov
          
      - name: Post to a Slack channel
        if: failure()
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#alert'
          notify_when: 'failure'
          notification_title: "{workflow} is failing"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          

  build-docker:
    name: Build and Push to DockerHub
    if: github.ref == 'refs/heads/master'
    needs: build-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Docker meta
        id: docker-build
        uses: docker/metadata-action@v4
        with:
          # images: euiyoung/fastapi-docker-github-actions:es
          images: $IMAGE_NAME:es

  #     - name: Login to Docker Hub
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and push Docker image
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  
      - name: Post to a Slack channel
        if: failure()
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#alert'
          notify_when: 'failure'
          notification_title: "{workflow} is failing"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    

  success_notification:
    name: Slack-Alerts
    needs: build-docker
    # if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Post to a Slack channel
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#alert'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
      

      
